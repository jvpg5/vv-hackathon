#!/usr/bin/env node

import axios from 'axios';
import { faker } from '@faker-js/faker';

// Configure faker to use Portuguese locale for better Brazilian content
// In newer versions of faker, we use the constructor or direct imports

const API_BASE_URL = 'http://localhost:1337/api';
const ADMIN_API_URL = 'http://localhost:1337/admin';

// Default admin credentials for seeding
const ADMIN_CREDENTIALS = {
  email: 'admin@valorizavilhena.com',
  password: 'AdminVV2025!'
};

class SeedDatabase {
  constructor() {
    this.adminToken = null;
    this.userTokens = [];
    this.createdData = {
      users: [],
      locals: [],
      premios: []
    };
  }

  async init() {
    console.log('üå± Iniciando processo de seed do banco de dados...\n');
    
    try {
      await this.authenticateAdmin();
      await this.seedUsers();
      await this.seedLocals();
      await this.seedPremios();
      
      console.log('\n‚úÖ Seed conclu√≠do com sucesso!');
      this.printSummary();
    } catch (error) {
      console.error('‚ùå Erro durante o seed:', error.message);
      if (error.response?.data) {
        console.error('Detalhes do erro:', JSON.stringify(error.response.data, null, 2));
      }
      process.exit(1);
    }
  }

  async authenticateAdmin() {
    console.log('üîë Autenticando como administrador...');
    
    try {
      const response = await axios.post(`${API_BASE_URL}/auth/local`, {
        identifier: ADMIN_CREDENTIALS.email,
        password: ADMIN_CREDENTIALS.password
      });
      
      this.adminToken = response.data.jwt;
      console.log('‚úÖ Autentica√ß√£o de admin realizada com sucesso');
    } catch (error) {
      console.log('‚ö†Ô∏è  Admin n√£o encontrado, tentando criar...');
      
      // Try to create admin user
      try {
        const createResponse = await axios.post(`${API_BASE_URL}/auth/local/register`, {
          username: 'admin',
          email: ADMIN_CREDENTIALS.email,
          password: ADMIN_CREDENTIALS.password
        });
        
        console.log('üë§ Usu√°rio admin criado, agora tentando autenticar...');
        
        // Try to authenticate again
        const authResponse = await axios.post(`${API_BASE_URL}/auth/local`, {
          identifier: ADMIN_CREDENTIALS.email,
          password: ADMIN_CREDENTIALS.password
        });
        
        this.adminToken = authResponse.data.jwt;
        console.log('‚úÖ Admin criado e autenticado com sucesso');
        console.log('‚ö†Ô∏è  IMPORTANTE: O usu√°rio criado tem role "Authenticated". Para criar conte√∫do, voc√™ precisa:');
        console.log('   1. Acessar http://localhost:1337/admin');
        console.log('   2. Ir em Settings > Roles > Authenticated');
        console.log('   3. Dar permiss√£o de CREATE para Local e Premio');
        console.log('   4. Ou rodar este seed como um usu√°rio que j√° tem essas permiss√µes');
      } catch (createError) {
        console.error('Detalhes do erro de cria√ß√£o:', createError.response?.data || createError.message);
        throw new Error(`N√£o foi poss√≠vel criar ou autenticar admin: ${createError.message}`);
      }
    }
  }

  async seedUsers() {
    console.log('\nüë• Criando usu√°rios de teste...');
    
    const users = [
      {
        username: 'joao.silva',
        email: 'joao.silva@email.com',
        password: 'senha123'
      },
      {
        username: 'maria.santos',
        email: 'maria.santos@email.com',
        password: 'senha123'
      },
      {
        username: 'pedro.oliveira',
        email: 'pedro.oliveira@email.com',
        password: 'senha123'
      },
      {
        username: 'ana.costa',
        email: 'ana.costa@email.com',
        password: 'senha123'
      },
      {
        username: 'carlos.ferreira',
        email: 'carlos.ferreira@email.com',
        password: 'senha123'
      }
    ];

    for (const userData of users) {
      try {
        const response = await axios.post(`${API_BASE_URL}/auth/local/register`, userData);
        this.createdData.users.push(response.data.user);
        this.userTokens.push(response.data.jwt);
        console.log(`‚úÖ Usu√°rio criado: ${userData.username}`);
      } catch (error) {
        if (error.response?.status === 400 && error.response?.data?.error?.message?.includes('Email')) {
          console.log(`‚ö†Ô∏è  Usu√°rio ${userData.username} j√° existe, pulando...`);
        } else {
          console.error(`‚ùå Erro ao criar usu√°rio ${userData.username}:`, error.response?.data || error.message);
        }
      }
    }
  }

  async seedLocals() {
    console.log('\nüìç Criando locais tur√≠sticos de Vilhena...');
    
    const locals = [
      {
        nome: 'Parque Ecol√≥gico de Vilhena',
        categoria: 'turismo',
        descricao_curta: '√Årea verde preservada no cora√ß√£o da cidade',
        descricao_longa: 'O Parque Ecol√≥gico de Vilhena √© um ref√∫gio natural que oferece trilhas, lago artificial e √°rea de lazer para toda a fam√≠lia. Com mais de 50 hectares de √°rea preservada, √© o local perfeito para relaxar e se conectar com a natureza.',
        qr_code_id: 'QR_PARQUE_ECOLOGICO_001',
        pontuacao: 50
      },
      {
        nome: 'Centro Cultural Jos√© de Alencar',
        categoria: 'cultura',
        descricao_curta: 'Principal centro cultural da cidade',
        descricao_longa: 'O Centro Cultural Jos√© de Alencar √© o epicentro das atividades culturais de Vilhena, oferecendo exposi√ß√µes, teatro, biblioteca e oficinas. Um espa√ßo dedicado √† preserva√ß√£o e promo√ß√£o da cultura local e regional.',
        qr_code_id: 'QR_CENTRO_CULTURAL_002',
        pontuacao: 75
      },
      {
        nome: 'Mercado Municipal',
        categoria: 'gastronomia',
        descricao_curta: 'Sabores tradicionais de Rond√¥nia',
        descricao_longa: 'O Mercado Municipal de Vilhena re√∫ne o melhor da gastronomia regional. Encontre produtos locais, pratos t√≠picos como pacu assado e farofa de banana, al√©m de frutas ex√≥ticas da Amaz√¥nia.',
        qr_code_id: 'QR_MERCADO_MUNICIPAL_003',
        pontuacao: 40
      },
      {
        nome: 'Museu do Pioneiro',
        categoria: 'historia',
        descricao_curta: 'Hist√≥ria da coloniza√ß√£o de Vilhena',
        descricao_longa: 'O Museu do Pioneiro conta a fascinante hist√≥ria da coloniza√ß√£o de Vilhena e regi√£o. Atrav√©s de objetos, fotografias e documentos hist√≥ricos, voc√™ conhecer√° como se deu a forma√ß√£o desta importante cidade de Rond√¥nia.',
        qr_code_id: 'QR_MUSEU_PIONEIRO_004',
        pontuacao: 80
      },
      {
        nome: 'Plaza Shopping Vilhena',
        categoria: 'outro',
        descricao_curta: 'Principal centro comercial da cidade',
        descricao_longa: 'O Plaza Shopping Vilhena √© o maior centro comercial da regi√£o, oferecendo lojas, restaurantes, cinema e pra√ßa de alimenta√ß√£o. Um local moderno para compras e entretenimento.',
        qr_code_id: 'QR_PLAZA_SHOPPING_005',
        pontuacao: 30
      },
      {
        nome: 'Igreja Matriz S√£o Jos√©',
        categoria: 'cultura',
        descricao_curta: 'Principal templo cat√≥lico da cidade',
        descricao_longa: 'A Igreja Matriz S√£o Jos√© √© um marco arquitet√¥nico e religioso de Vilhena. Com sua bela arquitetura e import√¢ncia hist√≥rica, representa a f√© e tradi√ß√£o da comunidade cat√≥lica local.',
        qr_code_id: 'QR_IGREJA_MATRIZ_006',
        pontuacao: 45
      },
      {
        nome: 'Est√°dio Portal da Amaz√¥nia',
        categoria: 'evento',
        descricao_curta: 'Casa do futebol vilhenense',
        descricao_longa: 'O Est√°dio Portal da Amaz√¥nia √© o principal palco esportivo de Vilhena, recebendo jogos do campeonato estadual e eventos esportivos da regi√£o. Um local de paix√£o e tradi√ß√£o esportiva.',
        qr_code_id: 'QR_ESTADIO_PORTAL_007',
        pontuacao: 35
      },
      {
        nome: 'Restaurante Sabor da Terra',
        categoria: 'gastronomia',
        descricao_curta: 'Culin√°ria t√≠pica amaz√¥nica',
        descricao_longa: 'O Restaurante Sabor da Terra √© famoso por seus pratos t√≠picos da regi√£o amaz√¥nica. Experimente o tambaqui na brasa, o pirarucu de casaca e outras del√≠cias da culin√°ria local em um ambiente acolhedor.',
        qr_code_id: 'QR_SABOR_TERRA_008',
        pontuacao: 60
      },
      {
        nome: 'Ponte sobre o Rio Pimenta Bueno',
        categoria: 'turismo',
        descricao_curta: 'Marco paisag√≠stico da cidade',
        descricao_longa: 'A Ponte sobre o Rio Pimenta Bueno oferece uma vista panor√¢mica deslumbrante. √â um local perfeito para contemplar o p√¥r do sol e apreciar a beleza natural que cerca Vilhena.',
        qr_code_id: 'QR_PONTE_RIO_009',
        pontuacao: 55
      },
      {
        nome: 'Centro de Conven√ß√µes',
        categoria: 'evento',
        descricao_curta: 'Espa√ßo para grandes eventos',
        descricao_longa: 'O Centro de Conven√ß√µes de Vilhena √© o local ideal para confer√™ncias, feiras, shows e grandes eventos. Com infraestrutura moderna e capacidade para milhares de pessoas.',
        qr_code_id: 'QR_CENTRO_CONVENCOES_010',
        pontuacao: 40
      }
    ];

    for (const localData of locals) {
      try {
        // First try with admin token
        let response;
        try {
          response = await axios.post(
            `${API_BASE_URL}/locals`,
            { data: localData },
            {
              headers: {
                'Authorization': `Bearer ${this.adminToken}`,
                'Content-Type': 'application/json'
              }
            }
          );
        } catch (authError) {
          if (authError.response?.status === 403) {
            console.log(`‚ö†Ô∏è  Tentando criar ${localData.nome} sem autentica√ß√£o...`);
            // Try without authentication (public access)
            response = await axios.post(
              `${API_BASE_URL}/locals`,
              { data: localData },
              {
                headers: {
                  'Content-Type': 'application/json'
                }
              }
            );
          } else {
            throw authError;
          }
        }
        
        this.createdData.locals.push(response.data.data);
        console.log(`‚úÖ Local criado: ${localData.nome}`);
      } catch (error) {
        console.error(`‚ùå Erro ao criar local ${localData.nome}:`, error.response?.data || error.message);
      }
    }
  }

  async seedPremios() {
    console.log('\nüéÅ Criando pr√™mios dispon√≠veis...');
    
    const premios = [
      {
        nome: 'Desconto 20% - Restaurante Sabor da Terra',
        descricao: 'Ganhe 20% de desconto em qualquer prato do card√°pio no Restaurante Sabor da Terra. V√°lido para almo√ßo e jantar.',
        pontos_necessarios: 100
      },
      {
        nome: 'Ingresso Gr√°tis - Cinema Plaza Shopping',
        descricao: 'Um ingresso gratuito para qualquer sess√£o de cinema no Plaza Shopping Vilhena. V√°lido de segunda a quinta-feira.',
        pontos_necessarios: 150
      },
      {
        nome: 'Tour Guiado - Museu do Pioneiro',
        descricao: 'Tour guiado especial no Museu do Pioneiro com acesso a √°reas exclusivas e material did√°tico complementar.',
        pontos_necessarios: 80
      },
      {
        nome: 'Camiseta Oficial - Valoriza Vilhena',
        descricao: 'Camiseta oficial do projeto Valoriza Vilhena em algod√£o premium. Dispon√≠vel nos tamanhos P, M, G e GG.',
        pontos_necessarios: 200
      },
      {
        nome: 'Desconto 30% - Produtos Locais no Mercado',
        descricao: 'Desconto de 30% em produtos regionais selecionados no Mercado Municipal. Inclui frutas, doces e artesanatos.',
        pontos_necessarios: 120
      },
      {
        nome: 'Passeio de Barco - Rio Pimenta Bueno',
        descricao: 'Passeio de barco pelo Rio Pimenta Bueno com dura√ß√£o de 2 horas, incluindo lanche e guia tur√≠stico.',
        pontos_necessarios: 300
      },
      {
        nome: 'Kit Degusta√ß√£o - Doces Regionais',
        descricao: 'Kit com 6 doces t√≠picos da regi√£o: cocada de cupua√ßu, rapadura de caju, bombom de castanha e outros sabores √∫nicos.',
        pontos_necessarios: 90
      },
      {
        nome: 'Voucher SPA - Hotel Portal',
        descricao: 'Day use completo no SPA do Hotel Portal, incluindo massagem relaxante, sauna e piscina. V√°lido por 6 meses.',
        pontos_necessarios: 500
      },
      {
        nome: 'Aula de Culin√°ria Regional',
        descricao: 'Aprenda a preparar pratos t√≠picos de Rond√¥nia em uma aula especial com chef local. Inclui degusta√ß√£o e receitas.',
        pontos_necessarios: 250
      },
      {
        nome: 'Caneca T√©rmica - Valoriza Vilhena',
        descricao: 'Caneca t√©rmica oficial do projeto com capacidade para 400ml. Ideal para manter suas bebidas na temperatura perfeita.',
        pontos_necessarios: 60
      }
    ];

    for (const premioData of premios) {
      try {
        // First try with admin token
        let response;
        try {
          response = await axios.post(
            `${API_BASE_URL}/premios`,
            { data: premioData },
            {
              headers: {
                'Authorization': `Bearer ${this.adminToken}`,
                'Content-Type': 'application/json'
              }
            }
          );
        } catch (authError) {
          if (authError.response?.status === 403) {
            console.log(`‚ö†Ô∏è  Tentando criar ${premioData.nome} sem autentica√ß√£o...`);
            // Try without authentication (public access)
            response = await axios.post(
              `${API_BASE_URL}/premios`,
              { data: premioData },
              {
                headers: {
                  'Content-Type': 'application/json'
                }
              }
            );
          } else {
            throw authError;
          }
        }
        
        this.createdData.premios.push(response.data.data);
        console.log(`‚úÖ Pr√™mio criado: ${premioData.nome}`);
      } catch (error) {
        console.error(`‚ùå Erro ao criar pr√™mio ${premioData.nome}:`, error.response?.data || error.message);
      }
    }
  }

  printSummary() {
    console.log('\nüìä RESUMO DO SEED:');
    console.log('==================');
    console.log(`üë• Usu√°rios criados: ${this.createdData.users.length}`);
    console.log(`üìç Locais criados: ${this.createdData.locals.length}`);
    console.log(`üéÅ Pr√™mios criados: ${this.createdData.premios.length}`);
    
    if (this.createdData.locals.length === 0 || this.createdData.premios.length === 0) {
      console.log('\n‚ö†Ô∏è  PROBLEMAS DE PERMISS√ÉO DETECTADOS:');
      console.log('=====================================');
      console.log('Se locais e pr√™mios n√£o foram criados, √© necess√°rio configurar permiss√µes:');
      console.log('1. Acesse: http://localhost:1337/admin');
      console.log('2. V√° em Settings > Users & Permissions Plugin > Roles');
      console.log('3. Clique em "Authenticated"');
      console.log('4. Em "Permissions", expanda "Local" e "Premio"');
      console.log('5. Marque as op√ß√µes: create, find, findOne');
      console.log('6. Clique em "Save"');
      console.log('7. Execute o seed novamente: pnpm seed');
    }
    
    console.log('\nüîó LINKS √öTEIS:');
    console.log('===============');
    console.log('üåê Frontend: http://localhost:3000');
    console.log('‚öôÔ∏è  Admin Strapi: http://localhost:1337/admin');
    console.log('üì° API Docs: http://localhost:1337/documentation');
    console.log('\nüîë CREDENCIAIS DE TESTE:');
    console.log('========================');
    console.log('Admin:');
    console.log(`  Email: ${ADMIN_CREDENTIALS.email}`);
    console.log(`  Senha: ${ADMIN_CREDENTIALS.password}`);
    console.log('\nUsu√°rios de teste:');
    console.log('  Email: joao.silva@email.com | Senha: senha123');
    console.log('  Email: maria.santos@email.com | Senha: senha123');
    console.log('  Email: pedro.oliveira@email.com | Senha: senha123');
    console.log('  Email: ana.costa@email.com | Senha: senha123');
    console.log('  Email: carlos.ferreira@email.com | Senha: senha123');
  }

  async clearDatabase() {
    console.log('üóëÔ∏è  Limpando banco de dados...');
    
    try {
      await this.authenticateAdmin();
      
      // Clear locals
      const localsResponse = await axios.get(`${API_BASE_URL}/locals`, {
        headers: { 'Authorization': `Bearer ${this.adminToken}` }
      });
      
      for (const local of localsResponse.data.data) {
        await axios.delete(`${API_BASE_URL}/locals/${local.documentId}`, {
          headers: { 'Authorization': `Bearer ${this.adminToken}` }
        });
      }
      console.log(`‚úÖ ${localsResponse.data.data.length} locais removidos`);
      
      // Clear premios
      const premiosResponse = await axios.get(`${API_BASE_URL}/premios`, {
        headers: { 'Authorization': `Bearer ${this.adminToken}` }
      });
      
      for (const premio of premiosResponse.data.data) {
        await axios.delete(`${API_BASE_URL}/premios/${premio.documentId}`, {
          headers: { 'Authorization': `Bearer ${this.adminToken}` }
        });
      }
      console.log(`‚úÖ ${premiosResponse.data.data.length} pr√™mios removidos`);
      
     
      
      // Clear users (except admin)
      try {
        const usersResponse = await axios.get(`${API_BASE_URL}/users`, {
          headers: { 'Authorization': `Bearer ${this.adminToken}` }
        });
        
        let removedUsersCount = 0;
        for (const user of usersResponse.data) {
          // Don't delete admin user
          if (user.email !== ADMIN_CREDENTIALS.email) {
            try {
              await axios.delete(`${API_BASE_URL}/users/${user.id}`, {
                headers: { 'Authorization': `Bearer ${this.adminToken}` }
              });
              removedUsersCount++;
            } catch (userError) {
              console.log(`‚ö†Ô∏è  N√£o foi poss√≠vel remover usu√°rio ${user.username}: ${userError.message}`);
            }
          }
        }
        console.log(`‚úÖ ${removedUsersCount} usu√°rios removidos (admin preservado)`);
      } catch (usersError) {
        console.log('‚ö†Ô∏è  N√£o foi poss√≠vel limpar usu√°rios:', usersError.message);
      }
      
      console.log('‚úÖ Banco de dados limpo com sucesso!');
    } catch (error) {
      console.error('‚ùå Erro ao limpar banco:', error.message);
    }
  }
}

// Check command line arguments
const args = process.argv.slice(2);
const shouldClear = args.includes('--clear');

const seeder = new SeedDatabase();

if (shouldClear) {
  seeder.clearDatabase();
} else {
  seeder.init();
}
